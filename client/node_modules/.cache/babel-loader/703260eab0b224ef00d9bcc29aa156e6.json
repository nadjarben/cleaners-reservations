{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\nadja\\\\Documents\\\\GitHub\\\\Cleaners\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\nadja\\\\Documents\\\\GitHub\\\\Cleaners\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { POST_USER, FETCH_USERS, DELETE_USER, ADD_CREDIT_TO_USER, CHANGE_USER_NAME } from './types';\nvar usersAPI = //'http://localhost:8080/api/users/' \n//'https://cleaners-reservation.herokuapp.com/api/users/'\n'https://www.thecleanersisrael.com/api/users/';\nexport var postUser = function postUser(name, phone, email, message) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.post(usersAPI, {\n                  name: name,\n                  phone: phone,\n                  email: email,\n                  message: message\n                }).then(function (res) {\n                  return dispatch({\n                    type: POST_USER,\n                    payload: res.data\n                  });\n                }).catch(function (err) {\n                  console.log(err);\n                  throw new Error('Couldnt post user.' + err);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var deleteUser = function deleteUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.delete(usersAPI + id).then(function (res) {\n                  return dispatch({\n                    type: DELETE_USER,\n                    payload: res.data\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var addCreditToUser = function addCreditToUser(id, credit) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios.post(usersAPI + id, {\n                  credit: credit\n                }).then(function (res) {\n                  return dispatch({\n                    type: ADD_CREDIT_TO_USER,\n                    payload: res.data\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var changeUserName = function changeUserName(id, name, surname, phone, email, address) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.post(usersAPI + 'modify/' + id, {\n                  name: name,\n                  surname: surname,\n                  phone: phone,\n                  email: email,\n                  address: address\n                }).then(function (res) {\n                  return dispatch({\n                    type: CHANGE_USER_NAME,\n                    payload: res.data\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchUsers = function fetchUsers() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return axios.get(usersAPI, {}).then(function (res) {\n                  return dispatch({\n                    type: FETCH_USERS,\n                    payload: res.data\n                  });\n                }).catch(function (err) {\n                  console.log(err);\n                  throw new Error('Could not fetch users.' + err);\n                });\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["C:/Users/nadja/Documents/GitHub/Cleaners/client/src/store/actions/userActions.js"],"names":["axios","POST_USER","FETCH_USERS","DELETE_USER","ADD_CREDIT_TO_USER","CHANGE_USER_NAME","usersAPI","postUser","name","phone","email","message","dispatch","post","then","res","type","payload","data","catch","err","console","log","Error","deleteUser","id","delete","addCreditToUser","credit","changeUserName","surname","address","fetchUsers","get"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { POST_USER, FETCH_USERS, DELETE_USER, ADD_CREDIT_TO_USER, CHANGE_USER_NAME } from './types';\n\n\nconst usersAPI = //'http://localhost:8080/api/users/' \n                    //'https://cleaners-reservation.herokuapp.com/api/users/'\n                    'https://www.thecleanersisrael.com/api/users/'\n\nexport const postUser = (name, phone, email, message) => async dispatch => {\n    await axios.post(usersAPI, {\n          name, phone, email, message\n      })\n      .then(res => {\n          return dispatch({\n            type: POST_USER,\n            payload: res.data,\n          });       \n        })\n        .catch(err => {\n          console.log(err);\n          throw new Error('Couldnt post user.' + err);\n        });\n  }\n\n export const deleteUser = (id) => async dispatch => {\n await axios.delete(usersAPI + id)\n .then(res => {\n   return dispatch ({\n     type: DELETE_USER,\n     payload: res.data\n   });\n })\n }\n\n export const addCreditToUser = (id, credit) => async dispatch => {\n    await axios.post(usersAPI + id, {\n        credit\n        })\n    .then(res => {\n      return dispatch ({\n        type: ADD_CREDIT_TO_USER,\n        payload: res.data\n      });\n    })\n  }\n\n  export const changeUserName = (id, name, surname, phone, email, address) => async dispatch => {\n    await axios.post(usersAPI + 'modify/'  + id, {\n        name, surname, phone, email, address\n        })\n    .then(res => {\n      return dispatch ({\n        type: CHANGE_USER_NAME,\n        payload: res.data\n      });\n    })\n  }\n \n    export const fetchUsers = () => async dispatch => {\n\n    await axios.get(usersAPI, {\n    })\n      .then(res => { \n        return dispatch({\n          type: FETCH_USERS,\n          payload: res.data\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        throw new Error('Could not fetch users.' + err);\n      });    \n  }"]},"metadata":{},"sourceType":"module"}