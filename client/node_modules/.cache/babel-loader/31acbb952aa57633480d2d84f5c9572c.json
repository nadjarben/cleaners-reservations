{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _autocompletionRequestBuilder = require('../utils/autocompletionRequestBuilder');\n\nvar _autocompletionRequestBuilder2 = _interopRequireDefault(_autocompletionRequestBuilder);\n\nvar _debounce = require('../utils/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _customPropTypes = require('../utils/customPropTypes');\n\nrequire('./index.css');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar GooglePlacesAutocomplete = function (_Component) {\n  _inherits(GooglePlacesAutocomplete, _Component); // eslint-disable-line react/destructuring-assignment\n\n\n  function GooglePlacesAutocomplete(props) {\n    _classCallCheck(this, GooglePlacesAutocomplete);\n\n    var _this = _possibleConstructorReturn(this, (GooglePlacesAutocomplete.__proto__ || Object.getPrototypeOf(GooglePlacesAutocomplete)).call(this, props));\n\n    _this.fetchSuggestions = (0, _debounce2.default)(function (value) {\n      var autocompletionRequest = _this.props.autocompletionRequest;\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.placesService.getPlacePredictions(_extends({}, (0, _autocompletionRequestBuilder2.default)(autocompletionRequest), {\n        input: value\n      }), _this.fetchSuggestionsCallback);\n    }, _this.props.debounce);\n    _this.state = {\n      activeSuggestion: null,\n      loading: false,\n      placesServiceStatus: null,\n      suggestions: [],\n      value: props.initialValue\n    };\n    _this.changeActiveSuggestion = _this.changeActiveSuggestion.bind(_this);\n    _this.changeValue = _this.changeValue.bind(_this);\n    _this.clearSuggestions = _this.clearSuggestions.bind(_this);\n    _this.fetchSuggestionsCallback = _this.fetchSuggestionsCallback.bind(_this);\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.initalizeService = _this.initializeService.bind(_this);\n    _this.onSuggestionSelect = _this.onSuggestionSelect.bind(_this);\n    _this.renderInput = _this.renderInput.bind(_this);\n    _this.renderSuggestions = _this.renderSuggestions.bind(_this);\n    return _this;\n  }\n\n  _createClass(GooglePlacesAutocomplete, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.initalizeService();\n      document.addEventListener('click', this.handleClick);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      document.removeEventListener('click', this.handleClick);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.initialValue) {\n        this.setState({\n          value: nextProps.initialValue\n        });\n      }\n    }\n  }, {\n    key: 'handleClick',\n    value: function handleClick(ev) {\n      if (!ev.target.id.includes('google-places-autocomplete')) {\n        this.clearSuggestions();\n      }\n    }\n  }, {\n    key: 'changeValue',\n    value: function changeValue(value) {\n      this.setState({\n        value: value\n      });\n\n      if (value.length > 0) {\n        this.fetchSuggestions(value);\n      } else {\n        this.setState({\n          suggestions: []\n        });\n      }\n    }\n  }, {\n    key: 'initializeService',\n    value: function initializeService() {\n      var _this2 = this;\n\n      if (!window.google) {\n        console.error('[react-google-places-autocomplete]: Google script not loaded'); // eslint-disable-line no-console\n\n        setTimeout(function () {\n          _this2.initalizeService();\n        }, 1000);\n        return;\n      }\n\n      if (!window.google.maps) {\n        console.error('[react-google-places-autocomplete]: Google maps script not loaded'); // eslint-disable-line no-console\n\n        setTimeout(function () {\n          _this2.initalizeService();\n        }, 1000);\n        return;\n      }\n\n      if (!window.google.maps.places) {\n        console.error('[react-google-places-autocomplete]: Google maps places script not loaded'); // eslint-disable-line no-console\n\n        setTimeout(function () {\n          _this2.initializeService();\n        }, 1000);\n        return;\n      }\n\n      this.placesService = new window.google.maps.places.AutocompleteService();\n      this.setState({\n        placesServiceStatus: window.google.maps.places.PlacesServiceStatus.OK\n      });\n    }\n  }, {\n    key: 'renderInput',\n    value: function renderInput() {\n      var _this3 = this;\n\n      var value = this.state.value,\n          _props = this.props,\n          inputClassName = _props.inputClassName,\n          inputStyle = _props.inputStyle,\n          placeholder = _props.placeholder,\n          renderInput = _props.renderInput,\n          required = _props.required;\n\n      if (renderInput) {\n        return renderInput({\n          autoComplete: 'off',\n          id: 'google-places-autocomplete-input',\n          value: value,\n          onChange: function onChange(_ref) {\n            var target = _ref.target;\n            return _this3.changeValue(target.value);\n          },\n          onKeyDown: this.handleKeyDown,\n          type: 'text',\n          placeholder: placeholder,\n          required: required\n        });\n      }\n\n      return _react2.default.createElement('input', {\n        autoComplete: 'off',\n        className: inputClassName || 'google-places-autocomplete__input',\n        id: 'google-places-autocomplete-input',\n        onChange: function onChange(_ref2) {\n          var target = _ref2.target;\n          return _this3.changeValue(target.value);\n        },\n        onKeyDown: this.handleKeyDown,\n        placeholder: placeholder,\n        style: inputStyle,\n        type: 'text',\n        value: value\n      });\n    }\n  }, {\n    key: 'renderSuggestions',\n    value: function renderSuggestions() {\n      var _this4 = this;\n\n      var _state = this.state,\n          activeSuggestion = _state.activeSuggestion,\n          suggestions = _state.suggestions,\n          _props2 = this.props,\n          renderSuggestions = _props2.renderSuggestions,\n          suggestionsClassNames = _props2.suggestionsClassNames,\n          suggestionsStyles = _props2.suggestionsStyles;\n\n      if (suggestions.length === 0) {\n        return null;\n      }\n\n      if (renderSuggestions) {\n        return renderSuggestions(activeSuggestion, suggestions, this.onSuggestionSelect);\n      }\n\n      return _react2.default.createElement('div', {\n        id: 'google-places-suggestions-container',\n        className: suggestionsClassNames.container || 'google-places-autocomplete__suggestions-container',\n        style: suggestionsStyles.container\n      }, suggestions.map(function (suggestion, index) {\n        return _react2.default.createElement('div', {\n          id: 'google-places-autocomplete-suggestion--' + index,\n          key: suggestion.id,\n          className: (suggestionsClassNames.suggestion || 'google-places-autocomplete__suggestion') + ' ' + (activeSuggestion === index ? suggestionsClassNames.suggestionActive || 'google-places-autocomplete__suggestion--active' : ''),\n          style: suggestionsStyles.suggestion,\n          onClick: function onClick(event) {\n            return _this4.onSuggestionSelect(suggestion, event);\n          },\n          role: 'presentation'\n        }, suggestion.description);\n      }));\n    }\n  }, {\n    key: 'renderLoader',\n    value: function renderLoader() {\n      var loader = this.props.loader;\n\n      if (loader) {\n        return loader;\n      }\n\n      return _react2.default.createElement('div', {\n        className: 'google-places-autocomplete__suggestions-container'\n      }, _react2.default.createElement('div', {\n        className: 'google-places-autcomplete__suggestions'\n      }, 'Loading...'));\n    }\n  }, {\n    key: 'onSuggestionSelect',\n    value: function onSuggestionSelect(suggestion) {\n      var ev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (ev) {\n        ev.stopPropagation();\n      }\n\n      var onSelect = this.props.onSelect;\n      this.setState({\n        activeSuggestion: null,\n        suggestions: [],\n        value: suggestion.description\n      });\n      onSelect(suggestion);\n    }\n  }, {\n    key: 'fetchSuggestionsCallback',\n    value: function fetchSuggestionsCallback(suggestions, status) {\n      var placesServiceStatus = this.state.placesServiceStatus;\n\n      if (status !== placesServiceStatus) {// show error\n      }\n\n      this.setState({\n        loading: false,\n        suggestions: suggestions || []\n      });\n    }\n  }, {\n    key: 'handleKeyDown',\n    value: function handleKeyDown(event) {\n      var _state2 = this.state,\n          activeSuggestion = _state2.activeSuggestion,\n          suggestions = _state2.suggestions;\n\n      switch (event.key) {\n        case 'Enter':\n          event.preventDefault();\n\n          if (activeSuggestion !== null) {\n            this.onSuggestionSelect(suggestions[activeSuggestion]);\n          }\n\n          break;\n\n        case 'ArrowDown':\n          this.changeActiveSuggestion(1);\n          break;\n\n        case 'ArrowUp':\n          this.changeActiveSuggestion(-1);\n          break;\n\n        case 'Escape':\n          this.clearSuggestions();\n          break;\n\n        default:\n      }\n    }\n  }, {\n    key: 'clearSuggestions',\n    value: function clearSuggestions() {\n      this.setState({\n        activeSuggestion: null,\n        suggestions: []\n      });\n    }\n  }, {\n    key: 'changeActiveSuggestion',\n    value: function changeActiveSuggestion(direction) {\n      var suggs = this.state.suggestions;\n\n      if (suggs.length === 0) {\n        return;\n      }\n\n      switch (direction) {\n        case 1:\n          this.setState(function (_ref3) {\n            var activeSuggestion = _ref3.activeSuggestion,\n                suggestions = _ref3.suggestions;\n\n            if (activeSuggestion === null || activeSuggestion === suggestions.length - 1) {\n              return {\n                activeSuggestion: 0\n              };\n            }\n\n            return {\n              activeSuggestion: activeSuggestion + 1\n            };\n          });\n          break;\n\n        case -1:\n          this.setState(function (_ref4) {\n            var activeSuggestion = _ref4.activeSuggestion,\n                suggestions = _ref4.suggestions;\n\n            if (!activeSuggestion) {\n              return {\n                activeSuggestion: suggestions.length - 1\n              };\n            }\n\n            return {\n              activeSuggestion: activeSuggestion - 1\n            };\n          });\n          break;\n\n        default:\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var loading = this.state.loading;\n      return _react2.default.createElement('div', {\n        className: 'google-places-autocomplete'\n      }, this.renderInput(), loading ? this.renderLoader() : this.renderSuggestions());\n    }\n  }]);\n\n  return GooglePlacesAutocomplete;\n}(_react.Component);\n\nGooglePlacesAutocomplete.propTypes = {\n  autocompletionRequest: _customPropTypes.autocompletionRequestType,\n  debounce: _propTypes2.default.number,\n  initialValue: _propTypes2.default.string,\n  inputClassName: _propTypes2.default.string,\n  inputStyle: _propTypes2.default.object,\n  loader: _propTypes2.default.node,\n  onSelect: _propTypes2.default.func,\n  placeholder: _propTypes2.default.string,\n  renderInput: _propTypes2.default.func,\n  renderSuggestions: _propTypes2.default.func,\n  suggestionsClassNames: _customPropTypes.suggestionClassNamesType,\n  suggestionsStyles: _customPropTypes.suggestionStylesType,\n  required: _propTypes2.default.bool\n};\nGooglePlacesAutocomplete.defaultProps = {\n  autocompletionRequest: {},\n  debounce: 300,\n  initialValue: '',\n  inputClassName: '',\n  inputStyle: {},\n  loader: null,\n  onSelect: function onSelect() {},\n  placeholder: 'Address',\n  renderInput: undefined,\n  renderSuggestions: undefined,\n  suggestionsClassNames: {\n    container: '',\n    suggestion: '',\n    suggestionActive: ''\n  },\n  suggestionsStyles: {\n    container: {},\n    suggestion: {}\n  },\n  required: false\n};\nexports.default = GooglePlacesAutocomplete;","map":null,"metadata":{},"sourceType":"script"}