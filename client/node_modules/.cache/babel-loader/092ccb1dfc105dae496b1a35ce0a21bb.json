{"ast":null,"code":"//This array should NEVER contain any file which doesn't exist. Otherwise no single file can be cached.\nvar preCache = ['/favicon.png', '/favicon.ico', '/assets/Bears/bear-standard.png', '/assets/jsInclude/mathjax.js', '/material.js', '/main.js', 'functions.js', '/material.css', '/materialcolors.css', '/user.css', '/translations.json', '/roboto.css', '/sw.js', '/']; //Please specify the version off your App. For every new version, any files are being refreched.\n\nvar appVersion = \"v0.2.1\"; //Please specify all files which sould never be cached\n\nvar noCache = ['/api/']; //On installation of app, all files from preCache are being stored automatically.\n\nself.addEventListener('install', function (event) {\n  event.waitUntil(caches.open(appVersion + '-offline').then(function (cache) {\n    return cache.addAll(preCache).then(function () {\n      console.log('mtSW: Given files were successfully pre-cached');\n    });\n  }));\n});\n\nfunction shouldCache(url) {\n  //Checking if url is market as noCache\n  var isNoCache = noCache.includes(url.substr(8).substr(url.substr(8).indexOf(\"/\"))) || noCache.includes(url.substr(8).substr(url.substr(8).indexOf(\"/\")).substr(0, url.substr(8).substr(url.substr(8).indexOf(\"/\")).indexOf(\"?\"))); //Checking of hostname of request != current hostname\n\n  var isOtherHost = url.substr(8).substr(0, url.substr(8).indexOf(\"/\")) != location.hostname && url.substr(7).substr(0, url.substr(7).indexOf(\"/\")) != location.hostname;\n  return (url.substr(0, 4) == \"http\" || url.substr(0, 3) == \"ftp\") && isNoCache == false && isOtherHost == false;\n} //If any fetch fails, it will look for the request in the cache and serve it from there first\n\n\nself.addEventListener('fetch', function (event) {\n  //Trying to answer with \"online\" version if fails, using cache.\n  event.respondWith(fetch(event.request).then(function (response) {\n    if (shouldCache(response.url)) {\n      console.log('mtSW: Adding file to cache: ' + response.url);\n      caches.open(appVersion + '-offline').then(function (cache) {\n        cache.add(new Request(response.url));\n      });\n    }\n\n    return response;\n  }).catch(function (error) {\n    console.log('mtSW: Error fetching. Serving content from cache: ' + error); //Check to see if you have it in the cache\n    //Return response\n    //If not in the cache, then return error page\n\n    return caches.open(appVersion + '-offline').then(function (cache) {\n      return cache.match(event.request).then(function (matching) {\n        var report = !matching || matching.status == 404 ? Promise.reject('no-match') : matching;\n        return report;\n      });\n    });\n  }));\n});","map":{"version":3,"sources":["C:\\Users\\nadja\\Documents\\GitHub\\Cleaners\\client\\src\\serviceWorker.js"],"names":["preCache","appVersion","noCache","self","addEventListener","event","waitUntil","caches","open","then","cache","addAll","console","log","shouldCache","url","isNoCache","includes","substr","indexOf","isOtherHost","location","hostname","respondWith","fetch","request","response","add","Request","catch","error","match","matching","report","status","Promise","reject"],"mappings":"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","sourcesContent":["//This array should NEVER contain any file which doesn't exist. Otherwise no single file can be cached.\r\nvar preCache=[\r\n  '/favicon.png',\r\n  '/favicon.ico',\r\n  '/assets/Bears/bear-standard.png',\r\n  '/assets/jsInclude/mathjax.js',\r\n  '/material.js',\r\n  '/main.js',\r\n  'functions.js',\r\n  '/material.css',\r\n  '/materialcolors.css',\r\n  '/user.css',\r\n  '/translations.json',\r\n  '/roboto.css',\r\n  '/sw.js',\r\n  '/'\r\n];\r\n//Please specify the version off your App. For every new version, any files are being refreched.\r\nvar appVersion=\"v0.2.1\";\r\n//Please specify all files which sould never be cached\r\nvar noCache=[\r\n  '/api/'\r\n];\r\n\r\n//On installation of app, all files from preCache are being stored automatically.\r\nself.addEventListener('install', function(event) {\r\n  event.waitUntil(\r\n      caches.open(appVersion+'-offline').then(function(cache) {\r\n          return cache.addAll(preCache).then(function(){\r\n            console.log('mtSW: Given files were successfully pre-cached')\r\n          });\r\n      })\r\n  );\r\n});\r\n\r\nfunction shouldCache(url) {\r\n    //Checking if url is market as noCache\r\n    var isNoCache=noCache.includes(url.substr(8).substr(url.substr(8).indexOf(\"/\")))||noCache.includes((url.substr(8).substr(url.substr(8).indexOf(\"/\"))).substr(0,(url.substr(8).substr(url.substr(8).indexOf(\"/\"))).indexOf(\"?\")));\r\n    //Checking of hostname of request != current hostname\r\n    var isOtherHost=url.substr(8).substr(0,url.substr(8).indexOf(\"/\"))!=location.hostname&&url.substr(7).substr(0,url.substr(7).indexOf(\"/\"))!=location.hostname;\r\n    return((url.substr(0,4)==\"http\"||url.substr(0,3)==\"ftp\") && isNoCache==false && isOtherHost==false);\r\n}\r\n//If any fetch fails, it will look for the request in the cache and serve it from there first\r\nself.addEventListener('fetch', function(event) {\r\n  //Trying to answer with \"online\" version if fails, using cache.\r\n  event.respondWith(\r\n    fetch(event.request).then(function (response) {\r\n      if(shouldCache(response.url)) {\r\n        console.log('mtSW: Adding file to cache: '+response.url);\r\n        caches.open(appVersion+'-offline').then(function(cache) {\r\n        cache.add(new Request(response.url));\r\n    });\r\n      }\r\n      return(response);\r\n    }).catch(function(error) {\r\n      console.log( 'mtSW: Error fetching. Serving content from cache: ' + error );\r\n\r\n      //Check to see if you have it in the cache\r\n      //Return response\r\n      //If not in the cache, then return error page\r\n      return caches.open(appVersion+'-offline').then(function (cache) {\r\n        return cache.match(event.request).then(function (matching) {\r\n          var report =  !matching || matching.status == 404?Promise.reject('no-match'): matching;\r\n          return report\r\n        });\r\n      });\r\n    })\r\n  );\r\n})"]},"metadata":{},"sourceType":"module"}