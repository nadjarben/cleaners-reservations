{"ast":null,"code":"import axios from 'axios';\nimport { POST_RESERVATION, FETCH_RESERVATIONS, DELETE_RESERVATION } from './types';\nvar reservationsAPI = //'http://localhost:8080/api/reservations/' \n'https://cleaners-reservation.herokuapp.com/api/reservations/';\nexport var postReservation = function postReservation(name, surname, phone, email, address, city, date, hour, info) {\n  return function (dispatch) {\n    axios.post(reservationsAPI, {\n      name: name,\n      surname: surname,\n      phone: phone,\n      email: email,\n      address: address,\n      city: city,\n      date: date,\n      hour: hour,\n      info: info\n    }).then(function (res) {\n      return dispatch({\n        type: POST_RESERVATION,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n      throw new Error('Couldnt post reservation.' + err);\n    });\n  };\n};\nexport var deleteReservation = function deleteReservation(id) {\n  return function (dispatch) {\n    return axios.get(\"\".concat(reservationsAPI, \"/delete/\").concat(id)).then(function (response) {\n      dispatch(deleteReservationSuccess(response.data));\n    }).catch(function (err) {\n      console.log(err);\n      throw new Error('Could not delete reservation.' + err);\n    });\n  };\n};\nexport var fetchReservations = function fetchReservations() {\n  return function (dispatch) {\n    axios.get(reservationsAPI, {}).then(function (res) {\n      var reservations = res.data;\n      return dispatch({\n        type: FETCH_RESERVATIONS,\n        payload: reservations\n      });\n    }).catch(function (err) {\n      console.log(err);\n      throw new Error('Could not fetch reservations.' + err);\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\nadja\\Documents\\GitHub\\Cleaners\\client\\src\\store\\actions\\reservationActions.js"],"names":["axios","POST_RESERVATION","FETCH_RESERVATIONS","DELETE_RESERVATION","reservationsAPI","postReservation","name","surname","phone","email","address","city","date","hour","info","dispatch","post","then","res","type","payload","data","catch","err","console","log","Error","deleteReservation","id","get","response","deleteReservationSuccess","fetchReservations","reservations"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,EAA+CC,kBAA/C,QAAyE,SAAzE;AAGA,IAAMC,eAAe,GAAG;AACA,8DADxB;AAGA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAmDC,IAAnD,EAAyDC,IAAzD;AAAA,SAAkE,UAAAC,QAAQ,EAAI;AACzGf,IAAAA,KAAK,CAACgB,IAAN,CAAWZ,eAAX,EAA4B;AACtBE,MAAAA,IAAI,EAAJA,IADsB;AAChBC,MAAAA,OAAO,EAAPA,OADgB;AACPC,MAAAA,KAAK,EAALA,KADO;AACAC,MAAAA,KAAK,EAALA,KADA;AACOC,MAAAA,OAAO,EAAPA,OADP;AACgBC,MAAAA,IAAI,EAAJA,IADhB;AACsBC,MAAAA,IAAI,EAAJA,IADtB;AAC4BC,MAAAA,IAAI,EAAJA,IAD5B;AACkCC,MAAAA,IAAI,EAAJA;AADlC,KAA5B,EAGGG,IAHH,CAGQ,UAAAC,GAAG,EAAI;AACT,aAAOH,QAAQ,CAAC;AACdI,QAAAA,IAAI,EAAElB,gBADQ;AAEdmB,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFC,OAAD,CAAf;AAID,KARL,EASKC,KATL,CASW,UAAAC,GAAG,EAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,YAAM,IAAIG,KAAJ,CAAU,8BAA8BH,GAAxC,CAAN;AACD,KAZL;AAaD,GAd4B;AAAA,CAAxB;AAeL,OAAO,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,EAAE,EAAI;AACrC,SAAO,UAACb,QAAD,EAAc;AACnB,WAAOf,KAAK,CAAC6B,GAAN,WAAazB,eAAb,qBAAuCwB,EAAvC,GACNX,IADM,CACD,UAAAa,QAAQ,EAAI;AAChBf,MAAAA,QAAQ,CAACgB,wBAAwB,CAACD,QAAQ,CAACT,IAAV,CAAzB,CAAR;AACD,KAHM,EAINC,KAJM,CAIA,UAAAC,GAAG,EAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,YAAM,IAAIG,KAAJ,CAAU,kCAAkCH,GAA5C,CAAN;AACD,KAPM,CAAP;AAQD,GATD;AAWD,CAZM;AAcP,OAAO,IAAMS,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAM,UAAAjB,QAAQ,EAAI;AAEjDf,IAAAA,KAAK,CAAC6B,GAAN,CAAUzB,eAAV,EAA2B,EAA3B,EAEGa,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX,UAAIe,YAAY,GAAGf,GAAG,CAACG,IAAvB;AACA,aAAON,QAAQ,CAAC;AACdI,QAAAA,IAAI,EAAEjB,kBADQ;AAEdkB,QAAAA,OAAO,EAAEa;AAFK,OAAD,CAAf;AAID,KARH,EASGX,KATH,CASS,UAAAC,GAAG,EAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,YAAM,IAAIG,KAAJ,CAAU,kCAAkCH,GAA5C,CAAN;AACD,KAZH;AAaD,GAfgC;AAAA,CAA1B","sourcesContent":["import axios from 'axios';\r\nimport { POST_RESERVATION, FETCH_RESERVATIONS, DELETE_RESERVATION } from './types';\r\n\r\n\r\nconst reservationsAPI = //'http://localhost:8080/api/reservations/' \r\n                        'https://cleaners-reservation.herokuapp.com/api/reservations/'\r\n\r\nexport const postReservation = (name, surname, phone, email, address, city, date, hour, info) => dispatch => {\r\n    axios.post(reservationsAPI, {\r\n          name, surname, phone, email, address, city, date, hour, info\r\n      })\r\n      .then(res => {\r\n          return dispatch({\r\n            type: POST_RESERVATION,\r\n            payload: res.data,\r\n          });       \r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          throw new Error('Couldnt post reservation.' + err);\r\n        });\r\n  }\r\n  export const deleteReservation = id => {\r\n    return (dispatch) => {\r\n      return axios.get(`${reservationsAPI}/delete/${id}`)\r\n      .then(response => {\r\n        dispatch(deleteReservationSuccess(response.data))\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        throw new Error('Could not delete reservation.' + err);\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  export const fetchReservations = () => dispatch => {\r\n\r\n    axios.get(reservationsAPI, {\r\n    })\r\n      .then(res => { \r\n        let reservations = res.data;\r\n        return dispatch({\r\n          type: FETCH_RESERVATIONS,\r\n          payload: reservations\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        throw new Error('Could not fetch reservations.' + err);\r\n      });    \r\n  }"]},"metadata":{},"sourceType":"module"}