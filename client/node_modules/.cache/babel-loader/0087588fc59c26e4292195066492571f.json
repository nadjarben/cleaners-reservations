{"ast":null,"code":"import axios from 'axios';\nimport { POST_RESERVATION, FETCH_RESERVATIONS, DELETE_RESERVATION, POST_LAST_RESERVATION } from './types';\nvar reservationsAPI = //'http://localhost:8080/api/reservations/' \n'https://cleaners-reservation.herokuapp.com/api/reservations/';\nvar lastReservationsAPI = //'http://localhost:8080/api/lastreservations/' \n'https://cleaners-reservation.herokuapp.com/api/lastreservations/';\nexport var postReservation = function postReservation(name, surname, phone, email, address, city, date, hour, info) {\n  return function (dispatch) {\n    axios.post(reservationsAPI, {\n      name: name,\n      surname: surname,\n      phone: phone,\n      email: email,\n      address: address,\n      city: city,\n      date: date,\n      hour: hour,\n      info: info\n    }).then(function (res) {\n      return dispatch({\n        type: POST_RESERVATION,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n      throw new Error('Couldnt post reservation.' + err);\n    });\n  };\n};\nexport var postLastReservation = function postLastReservation(name, surname, phone, email, address, city, date, hour, info) {\n  return function (dispatch) {\n    axios.post(lastReservationsAPI, {\n      name: name,\n      surname: surname,\n      phone: phone,\n      email: email,\n      address: address,\n      city: city,\n      date: date,\n      hour: hour,\n      info: info\n    }).then(function (res) {\n      return dispatch({\n        type: POST_LAST_RESERVATION,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n      throw new Error('Couldnt post last reservation.' + err);\n    });\n  };\n};\nexport var deleteLastReservation = function deleteLastReservation(id) {\n  return function (dispatch) {\n    axios.delete(lastReservationsAPI + id).then(function (res) {\n      return dispatch({\n        type: DELETE_RESERVATION,\n        payload: res.data\n      });\n    });\n  };\n};\nexport var deleteReservation = function deleteReservation(id) {\n  return function (dispatch) {\n    axios.delete(reservationsAPI + id).then(function (res) {\n      return dispatch({\n        type: DELETE_RESERVATION,\n        payload: res.data\n      });\n    });\n  };\n};\nexport var fetchReservations = function fetchReservations() {\n  return function (dispatch) {\n    axios.get(reservationsAPI, {}).then(function (res) {\n      return dispatch({\n        type: FETCH_RESERVATIONS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n      throw new Error('Could not fetch reservations.' + err);\n    });\n  };\n};\nexport var archiveReservation = function archiveReservation() {\n  return function (dispatch) {// axios.\n    // return dispatch({\n    //  type: ARCHIVE_RESERVATION,\n    //  payload: res.data\n    // });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\nadja\\Documents\\GitHub\\Cleaners\\client\\src\\store\\actions\\reservationActions.js"],"names":["axios","POST_RESERVATION","FETCH_RESERVATIONS","DELETE_RESERVATION","POST_LAST_RESERVATION","reservationsAPI","lastReservationsAPI","postReservation","name","surname","phone","email","address","city","date","hour","info","dispatch","post","then","res","type","payload","data","catch","err","console","log","Error","postLastReservation","deleteLastReservation","id","delete","deleteReservation","fetchReservations","get","archiveReservation"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { POST_RESERVATION, FETCH_RESERVATIONS, DELETE_RESERVATION, POST_LAST_RESERVATION } from './types';\r\n\r\n\r\nconst reservationsAPI = //'http://localhost:8080/api/reservations/' \r\n                        'https://cleaners-reservation.herokuapp.com/api/reservations/'\r\nconst lastReservationsAPI = //'http://localhost:8080/api/lastreservations/' \r\n                        'https://cleaners-reservation.herokuapp.com/api/lastreservations/'\r\n\r\n\r\nexport const postReservation = (name, surname, phone, email, address, city, date, hour, info) => dispatch => {\r\n    axios.post(reservationsAPI, {\r\n          name, surname, phone, email, address, city, date, hour, info\r\n      })\r\n      .then(res => {\r\n          return dispatch({\r\n            type: POST_RESERVATION,\r\n            payload: res.data,\r\n          });       \r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          throw new Error('Couldnt post reservation.' + err);\r\n        });\r\n  }\r\n  export const postLastReservation = (name, surname, phone, email, address, city, date, hour, info) => dispatch => {\r\n    axios.post(lastReservationsAPI, {\r\n          name, surname, phone, email, address, city, date, hour, info\r\n      })\r\n      .then(res => {\r\n          return dispatch({\r\n            type: POST_LAST_RESERVATION,\r\n            payload: res.data,\r\n          });       \r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          throw new Error('Couldnt post last reservation.' + err);\r\n        });\r\n  }\r\n\r\n  export const deleteLastReservation = (id) => dispatch => {\r\n    axios.delete(lastReservationsAPI + id)\r\n    .then(res => {\r\n      return dispatch ({\r\n        type: DELETE_RESERVATION,\r\n        payload: res.data\r\n      });\r\n    })\r\n    }\r\n\r\n export const deleteReservation = (id) => dispatch => {\r\n axios.delete(reservationsAPI + id)\r\n .then(res => {\r\n   return dispatch ({\r\n     type: DELETE_RESERVATION,\r\n     payload: res.data\r\n   });\r\n })\r\n }\r\n \r\n  export const fetchReservations = () => dispatch => {\r\n\r\n    axios.get(reservationsAPI, {\r\n    })\r\n      .then(res => { \r\n        return dispatch({\r\n          type: FETCH_RESERVATIONS,\r\n          payload: res.data\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        throw new Error('Could not fetch reservations.' + err);\r\n      });    \r\n  }\r\n\r\n  export const archiveReservation = () => dispatch => {\r\n   // axios.\r\n   // return dispatch({\r\n    //  type: ARCHIVE_RESERVATION,\r\n    //  payload: res.data\r\n   // });\r\n  }"]},"metadata":{},"sourceType":"module"}