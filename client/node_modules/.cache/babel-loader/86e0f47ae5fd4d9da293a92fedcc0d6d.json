{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\nadja\\\\Documents\\\\GitHub\\\\Cleaners\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\nadja\\\\Documents\\\\GitHub\\\\Cleaners\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import{POST_USER,FETCH_USERS,DELETE_USER,ADD_CREDIT_TO_USER,CHANGE_USER_NAME}from'./types';var usersAPI=//'http://localhost:8080/api/users/' \n//'https://cleaners-reservation.herokuapp.com/api/users/'\n'https://www.thecleanersisrael.com/api/users/';export var postUser=function postUser(name,phone,email,message){return(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.post(usersAPI,{name:name,phone:phone,email:email,message:message}).then(function(res){return dispatch({type:POST_USER,payload:res.data});}).catch(function(err){console.log(err);throw new Error('Couldnt post user.'+err);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};export var deleteUser=function deleteUser(id){return(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return axios.delete(usersAPI+id).then(function(res){return dispatch({type:DELETE_USER,payload:res.data});});case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());};export var addCreditToUser=function addCreditToUser(id,credit){return(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return axios.post(usersAPI+id,{credit:credit}).then(function(res){return dispatch({type:ADD_CREDIT_TO_USER,payload:res.data});});case 2:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}());};export var changeUserName=function changeUserName(id,name,surname,phone,email,address){return(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return axios.post(usersAPI+'modify/'+id,{name:name,surname:surname,phone:phone,email:email,address:address}).then(function(res){return dispatch({type:CHANGE_USER_NAME,payload:res.data});});case 2:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}());};export var fetchUsers=function fetchUsers(){return(/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return axios.get(usersAPI,{}).then(function(res){return dispatch({type:FETCH_USERS,payload:res.data});}).catch(function(err){console.log(err);throw new Error('Could not fetch users.'+err);});case 2:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x5){return _ref5.apply(this,arguments);};}());};","map":{"version":3,"sources":["C:/Users/nadja/Documents/GitHub/Cleaners/client/src/store/actions/userActions.js"],"names":["axios","POST_USER","FETCH_USERS","DELETE_USER","ADD_CREDIT_TO_USER","CHANGE_USER_NAME","usersAPI","postUser","name","phone","email","message","dispatch","post","then","res","type","payload","data","catch","err","console","log","Error","deleteUser","id","delete","addCreditToUser","credit","changeUserName","surname","address","fetchUsers","get"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { POST_USER, FETCH_USERS, DELETE_USER, ADD_CREDIT_TO_USER, CHANGE_USER_NAME } from './types';\n\n\nconst usersAPI = //'http://localhost:8080/api/users/' \n                    //'https://cleaners-reservation.herokuapp.com/api/users/'\n                    'https://www.thecleanersisrael.com/api/users/'\n\nexport const postUser = (name, phone, email, message) => async dispatch => {\n    await axios.post(usersAPI, {\n          name, phone, email, message\n      })\n      .then(res => {\n          return dispatch({\n            type: POST_USER,\n            payload: res.data,\n          });       \n        })\n        .catch(err => {\n          console.log(err);\n          throw new Error('Couldnt post user.' + err);\n        });\n  }\n\n export const deleteUser = (id) => async dispatch => {\n await axios.delete(usersAPI + id)\n .then(res => {\n   return dispatch ({\n     type: DELETE_USER,\n     payload: res.data\n   });\n })\n }\n\n export const addCreditToUser = (id, credit) => async dispatch => {\n    await axios.post(usersAPI + id, {\n        credit\n        })\n    .then(res => {\n      return dispatch ({\n        type: ADD_CREDIT_TO_USER,\n        payload: res.data\n      });\n    })\n  }\n\n  export const changeUserName = (id, name, surname, phone, email, address) => async dispatch => {\n    await axios.post(usersAPI + 'modify/'  + id, {\n        name, surname, phone, email, address\n        })\n    .then(res => {\n      return dispatch ({\n        type: CHANGE_USER_NAME,\n        payload: res.data\n      });\n    })\n  }\n \n    export const fetchUsers = () => async dispatch => {\n\n    await axios.get(usersAPI, {\n    })\n      .then(res => { \n        return dispatch({\n          type: FETCH_USERS,\n          payload: res.data\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        throw new Error('Could not fetch users.' + err);\n      });    \n  }"]},"metadata":{},"sourceType":"module"}