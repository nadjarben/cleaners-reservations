{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\nadja\\\\Documents\\\\GitHub\\\\Cleaners\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\nadja\\\\Documents\\\\GitHub\\\\Cleaners\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { POST_RESERVATION, FETCH_RESERVATIONS, DELETE_RESERVATION, MAIL_RESERVATION } from './types';\nvar reservationsAPI = //'http://localhost:8080/api/reservations/' \n//'https://cleaners-reservation.herokuapp.com/api/reservations/'\n'https://www.thecleanersisrael.com/api/reservations/';\nvar nodeMailerAPI = //'http://localhost:8080/api/send/'\n'https://www.thecleanersisrael.com/api/send/';\nexport var postReservation = function postReservation(name, surname, phone, email, address, date, hour, info, namefact, addressfact, note) {\n  return function (dispatch) {\n    axios.post(reservationsAPI, {\n      name: name,\n      surname: surname,\n      phone: phone,\n      email: email,\n      address: address,\n      date: date,\n      hour: hour,\n      info: info,\n      namefact: namefact,\n      addressfact: addressfact,\n      note: note\n    }).then(function (res) {\n      return dispatch({\n        type: POST_RESERVATION,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n      throw new Error('Couldnt post reservation.' + err);\n    });\n  };\n};\nexport var mailReservation = function mailReservation(name, surname, phone, email, address, date, hour, info, namefact, addressfact, note) {\n  return function (dispatch) {\n    axios.post(nodeMailerAPI, {\n      name: name,\n      surname: surname,\n      phone: phone,\n      email: email,\n      address: address,\n      date: date,\n      hour: hour,\n      info: info,\n      namefact: namefact,\n      addressfact: addressfact,\n      note: note\n    }).then(function (res) {\n      return dispatch({\n        type: MAIL_RESERVATION,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n      throw new Error('Couldnt post reservation.' + err);\n    });\n  };\n};\nexport var deleteReservation = function deleteReservation(id) {\n  return function (dispatch) {\n    axios.delete(reservationsAPI + id).then(function (res) {\n      return dispatch({\n        type: DELETE_RESERVATION,\n        payload: res.data\n      });\n    });\n  };\n};\nexport var fetchReservations = function fetchReservations() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(reservationsAPI, {}).then(function (res) {\n                  return dispatch({\n                    type: FETCH_RESERVATIONS,\n                    payload: res.data\n                  });\n                }).catch(function (err) {\n                  console.log(err);\n                  throw new Error('Could not fetch reservations.' + err);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["C:\\Users\\nadja\\Documents\\GitHub\\Cleaners\\client\\src\\store\\actions\\reservationActions.js"],"names":["axios","POST_RESERVATION","FETCH_RESERVATIONS","DELETE_RESERVATION","MAIL_RESERVATION","reservationsAPI","nodeMailerAPI","postReservation","name","surname","phone","email","address","date","hour","info","namefact","addressfact","note","dispatch","post","then","res","type","payload","data","catch","err","console","log","Error","mailReservation","deleteReservation","id","delete","fetchReservations","get"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { POST_RESERVATION, FETCH_RESERVATIONS, DELETE_RESERVATION, MAIL_RESERVATION } from './types';\n\n\nconst reservationsAPI = //'http://localhost:8080/api/reservations/' \n                        //'https://cleaners-reservation.herokuapp.com/api/reservations/'\n                        'https://www.thecleanersisrael.com/api/reservations/'\nconst nodeMailerAPI = //'http://localhost:8080/api/send/'\n                      'https://www.thecleanersisrael.com/api/send/'\n\n\n\nexport const postReservation = (name, surname, phone, email, address, date, hour, info, namefact, addressfact, note) => dispatch => {\n    axios.post(reservationsAPI, {\n          name, surname, phone, email, address, date, hour, info, namefact, addressfact, note\n      })\n      .then(res => {\n          return dispatch({\n            type: POST_RESERVATION,\n            payload: res.data,\n          });       \n        })\n        .catch(err => {\n          console.log(err);\n          throw new Error('Couldnt post reservation.' + err);\n        });\n  }\n\n  export const mailReservation = (name, surname, phone, email, address, date, hour, info, namefact, addressfact, note) => dispatch => {\n    axios.post(nodeMailerAPI, {\n          name, surname, phone, email, address, date, hour, info, namefact, addressfact, note\n      })\n      .then(res => {\n          return dispatch({\n            type: MAIL_RESERVATION,\n            payload: res.data,\n          });       \n        })\n        .catch(err => {\n          console.log(err);\n          throw new Error('Couldnt post reservation.' + err);\n        });\n  }\n\n export const deleteReservation = (id) => dispatch => {\n axios.delete(reservationsAPI + id)\n .then(res => {\n   return dispatch ({\n     type: DELETE_RESERVATION,\n     payload: res.data\n   });\n })\n }\n \n  export const fetchReservations = () => async dispatch => {\n\n    await axios.get(reservationsAPI, {\n    })\n      .then(res => { \n        return dispatch({\n          type: FETCH_RESERVATIONS,\n          payload: res.data\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        throw new Error('Could not fetch reservations.' + err);\n      });    \n  }\n\n\n  "]},"metadata":{},"sourceType":"module"}