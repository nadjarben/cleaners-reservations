{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\nadja\\\\Documents\\\\GitHub\\\\Cleaners\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\nadja\\\\Documents\\\\GitHub\\\\Cleaners\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { POST_LAST_RESERVATION, FETCH_LAST_RESERVATIONS, DELETE_LAST_RESERVATION } from './types';\nvar lastReservationsAPI = 'http://localhost:8080/api/lastreservations/'; //'https://cleaners-reservation.herokuapp.com/api/lastreservations/'\n//'https://www.thecleanersisrael.com/api/lastreservations/'\n\nexport var postLastReservation = function postLastReservation(name, surname, phone, email, address, date, hour, info, namefact, addressfact, note) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.post(lastReservationsAPI, {\n                  name: name,\n                  surname: surname,\n                  phone: phone,\n                  email: email,\n                  address: address,\n                  date: date,\n                  hour: hour,\n                  info: info,\n                  namefact: namefact,\n                  addressfact: addressfact,\n                  note: note\n                }).then(function (res) {\n                  return dispatch({\n                    type: POST_LAST_RESERVATION,\n                    payload: res.data\n                  });\n                }).catch(function (err) {\n                  console.log(err);\n                  throw new Error('Couldnt post last reservation.' + err);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchLastReservations = function fetchLastReservations() {\n  return function (dispatch) {\n    axios.get(lastReservationsAPI, {}).then(function (res) {\n      return dispatch({\n        type: FETCH_LAST_RESERVATIONS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n      throw new Error('Could not fetch last reservations.' + err);\n    });\n  };\n};\nexport var deleteLastReservation = function deleteLastReservation(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.delete(lastReservationsAPI + id).then(function (res) {\n                  return dispatch({\n                    type: DELETE_LAST_RESERVATION,\n                    payload: res.data\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["C:\\Users\\nadja\\Documents\\GitHub\\Cleaners\\client\\src\\store\\actions\\notifActions.js"],"names":["axios","POST_LAST_RESERVATION","FETCH_LAST_RESERVATIONS","DELETE_LAST_RESERVATION","lastReservationsAPI","postLastReservation","name","surname","phone","email","address","date","hour","info","namefact","addressfact","note","dispatch","post","then","res","type","payload","data","catch","err","console","log","Error","fetchLastReservations","get","deleteLastReservation","id","delete"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,qBAAT,EAAgCC,uBAAhC,EAAyDC,uBAAzD,QAAwF,SAAxF;AAEA,IAAMC,mBAAmB,GAAG,6CAA5B,C,CAC4B;AACA;;AAG5B,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAmDC,IAAnD,EAAyDC,QAAzD,EAAmEC,WAAnE,EAAgFC,IAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAyF,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAClHjB,KAAK,CAACkB,IAAN,CAAWd,mBAAX,EAAgC;AAChCE,kBAAAA,IAAI,EAAJA,IADgC;AAC1BC,kBAAAA,OAAO,EAAPA,OAD0B;AACjBC,kBAAAA,KAAK,EAALA,KADiB;AACVC,kBAAAA,KAAK,EAALA,KADU;AACHC,kBAAAA,OAAO,EAAPA,OADG;AACMC,kBAAAA,IAAI,EAAJA,IADN;AACYC,kBAAAA,IAAI,EAAJA,IADZ;AACkBC,kBAAAA,IAAI,EAAJA,IADlB;AACwBC,kBAAAA,QAAQ,EAARA,QADxB;AACkCC,kBAAAA,WAAW,EAAXA,WADlC;AAC+CC,kBAAAA,IAAI,EAAJA;AAD/C,iBAAhC,EAGFG,IAHE,CAGG,UAAAC,GAAG,EAAI;AACR,yBAAOH,QAAQ,CAAC;AAChBI,oBAAAA,IAAI,EAAEpB,qBADU;AAEhBqB,oBAAAA,OAAO,EAAEF,GAAG,CAACG;AAFG,mBAAD,CAAf;AAIH,iBARC,EASDC,KATC,CASK,UAAAC,GAAG,EAAI;AACZC,kBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,wBAAM,IAAIG,KAAJ,CAAU,mCAAmCH,GAA7C,CAAN;AACH,iBAZG,CADkH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;AAeL,OAAO,IAAMI,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAM,UAAAZ,QAAQ,EAAI;AAErDjB,IAAAA,KAAK,CAAC8B,GAAN,CAAU1B,mBAAV,EAA+B,EAA/B,EAEGe,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX,aAAOH,QAAQ,CAAC;AACdI,QAAAA,IAAI,EAAEnB,uBADQ;AAEdoB,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFC,OAAD,CAAf;AAID,KAPH,EAQGC,KARH,CAQS,UAAAC,GAAG,EAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,YAAM,IAAIG,KAAJ,CAAU,uCAAuCH,GAAjD,CAAN;AACD,KAXH;AAYD,GAdoC;AAAA,CAA9B;AAgBP,OAAO,IAAMM,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAQ,kBAAMf,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACrCjB,KAAK,CAACiC,MAAN,CAAa7B,mBAAmB,GAAG4B,EAAnC,EACLb,IADK,CACA,UAAAC,GAAG,EAAI;AACX,yBAAOH,QAAQ,CAAE;AACfI,oBAAAA,IAAI,EAAElB,uBADS;AAEfmB,oBAAAA,OAAO,EAAEF,GAAG,CAACG;AAFE,mBAAF,CAAf;AAID,iBANK,CADqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B","sourcesContent":["import axios from 'axios';\nimport { POST_LAST_RESERVATION, FETCH_LAST_RESERVATIONS, DELETE_LAST_RESERVATION } from './types';\n\nconst lastReservationsAPI = 'http://localhost:8080/api/lastreservations/' \n                            //'https://cleaners-reservation.herokuapp.com/api/lastreservations/'\n                            //'https://www.thecleanersisrael.com/api/lastreservations/'\n\n\nexport const postLastReservation = (name, surname, phone, email, address, date, hour, info, namefact, addressfact, note) => async dispatch => {\n    await axios.post(lastReservationsAPI, {\n          name, surname, phone, email, address, date, hour, info, namefact, addressfact, note\n      })\n       .then(res => {\n            return dispatch({\n            type: POST_LAST_RESERVATION,\n            payload: res.data,\n          });       \n        })\n        .catch(err => {\n          console.log(err);\n          throw new Error('Couldnt post last reservation.' + err);\n      });\n  }\n  export const fetchLastReservations = () => dispatch => {\n\n    axios.get(lastReservationsAPI, {\n    })\n      .then(res => { \n        return dispatch({\n          type: FETCH_LAST_RESERVATIONS,\n          payload: res.data\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        throw new Error('Could not fetch last reservations.' + err);\n      });    \n  }\n\n  export const deleteLastReservation = (id) => async dispatch => {\n    await axios.delete(lastReservationsAPI + id)\n    .then(res => {\n      return dispatch ({\n        type: DELETE_LAST_RESERVATION,\n        payload: res.data\n      });\n    })\n  }\n"]},"metadata":{},"sourceType":"module"}