{"version":3,"file":"SubscriptionGateway.js","sourceRoot":"","sources":["../../src/lib/subscription/SubscriptionGateway.ts"],"names":[],"mappings":"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","sourcesContent":["import * as querystring from 'querystring';\nimport { HttpClient } from '../http/HttpClient';\nimport { PlanRequest, PlanResponse } from './models/Plan';\nimport { PlanListResponse } from './models/PlanList';\nimport { SubscriptionRequest, SubscriptionResponse } from './models/Subscription';\nimport { ChargeRequest, ChargeResponse } from './models/Charge';\nimport { SubscriptionListResponse } from './models/SubscriptionList';\nimport { ChargeListResponse } from './models/ChargeList';\n\nexport class SubscriptionGateway {\n    private http: HttpClient;\n\n    public constructor(http: HttpClient) {\n        this.http = http;\n    }\n\n    /**\n     * Plans\n     */\n\n    public async createPlan(plan: PlanRequest): Promise<PlanResponse> {\n        const path = '/services/2/recurring/plans';\n        const body = plan;\n        return this.http.post(path, body);\n    }\n\n    public async updatePlan(planId: number, updates: PlanRequest): Promise<PlanResponse> {\n        const path = `/services/2/recurring/plans/${planId}`;\n        const body = updates;\n        return this.http.put(path, body);\n    }\n\n    public async getPlan(planId: number): Promise<PlanResponse> {\n        const path = `/services/2/recurring/plans/${planId}`;\n        return this.http.get(path);\n    }\n\n    public async getAllPlans(parameters?: GetAllPlansQueryParmas): Promise<PlanListResponse> {\n        const queryParams = querystring.stringify(parameters);\n        const path = `/services/2/recurring/plans?${queryParams}`;\n        return this.http.get(path);\n    }\n\n    /**\n     * Subscriptions\n     */\n\n    public async createSubscription(subscription: SubscriptionRequest): Promise<SubscriptionResponse> {\n        const path = '/services/2/recurring/subscriptions';\n        const body = subscription;\n        return this.http.post(path, body);\n    }\n\n    public async createMerchantManagedSubscription(subscription: SubscriptionRequest): Promise<SubscriptionResponse> {\n        const path = '/services/2/recurring/ondemand';\n        const body = subscription;\n        return this.http.post(path, body);\n    }\n\n    public async createMerchantManagedSubscriptionCharge(subscriptionId: number, charge: ChargeRequest): Promise<ChargeResponse> {\n        const path = `/services/2/recurring/ondemand/${subscriptionId}`;\n        const body = charge;\n        return this.http.post(path, body);\n    }\n\n    public async updateSubscription(subscriptionId: number, updates: SubscriptionRequest): Promise<SubscriptionResponse> {\n        const path = `/services/2/recurring/subscriptions/${subscriptionId}`;\n        const body = updates;\n        return this.http.put(path, body);\n    }\n\n    public async getSubscription(subscriptionId: number): Promise<SubscriptionResponse> {\n        const path = `/services/2/recurring/subscriptions/${subscriptionId}`;\n        return this.http.get(path);\n    }\n\n    public async getSubscriptionCharge(transactionId: number): Promise<ChargeResponse> {\n        const path = `/services/2/recurring/subscriptions/charges/resolve?transactionid=${transactionId}`;\n        return this.http.get(path);\n    }\n\n    public async getSubscriptionSwitchCharge(subscriptionId: number, parameters?: GetSubscriptionSwitchChargeQueryParams): Promise<ChargeResponse> {\n        const queryParams = querystring.stringify(parameters);\n        const path = `/services/2/recurring/subscriptions/${subscriptionId}/switch-charge-amount?${queryParams}`;\n        return this.http.get(path);\n    }\n\n    public async getAllSubscriptions(parameters?: GetAllSubscriptionsQueryParams): Promise<SubscriptionListResponse> {\n        const queryParams = querystring.stringify(parameters);\n        const path = `/services/2/recurring/subscriptions?${queryParams}`;\n        return this.http.get(path);\n    }\n\n    public async getAllSubscriptionCharges(subscriptionId: number, parameters?: GetAllSubscriptionChargesQueryParams): Promise<ChargeListResponse> {\n        const queryParams = querystring.stringify(parameters);\n        const path = `/services/2/recurring/subscriptions/${subscriptionId}/charges?${queryParams}`;\n        return this.http.get(path);\n    }\n}\n\ninterface GetAllPlansQueryParmas {\n    pagesize?: number;\n    after?: number;\n    before?: number;\n    gettotal?: boolean;\n    fulldescription?: boolean;\n    status?: 'ACTIVE' | 'INACTIVE';\n}\n\ninterface GetAllSubscriptionsQueryParams {\n    pagesize?: number;\n    after?: number;\n    before?: number;\n    gettotal?: boolean;\n    fulldescription?: boolean;\n    status?: 'ACTIVE' | 'CANCELED' | 'SUSPENDED' | 'DELETED';\n    shopperid?: number;\n    planid?: number;\n}\n\ninterface GetAllSubscriptionChargesQueryParams {\n    pagesize?: number;\n    after?: number;\n    before?: number;\n    gettotal?: boolean;\n    fulldescription?: boolean;\n}\n\ninterface GetSubscriptionSwitchChargeQueryParams {\n    newplanid: number;\n    newquantity?: number;\n}\n"]}