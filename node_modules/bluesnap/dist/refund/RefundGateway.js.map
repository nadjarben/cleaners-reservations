{"version":3,"file":"RefundGateway.js","sourceRoot":"","sources":["../../src/lib/refund/RefundGateway.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2CAA2C;AAG3C,MAAa,aAAa;IAGtB,YAAmB,IAAgB;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAEY,MAAM,CAAC,aAAqB,EAAE,MAA0B;;YACjE,MAAM,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAClD,MAAM,IAAI,GAAG,4BAA4B,aAAa,WAAW,WAAW,EAAE,CAAC;YAC/E,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;KAAA;CACJ;AAZD,sCAYC","sourcesContent":["import * as querystring from 'querystring';\nimport { HttpClient } from '../http/HttpClient';\n\nexport class RefundGateway {\n    private http: HttpClient;\n\n    public constructor(http: HttpClient) {\n        this.http = http;\n    }\n\n    public async refund(transactionId: string, params?: RefundQueryParams): Promise<null> {\n        const queryParams = querystring.stringify(params);\n        const path = `/services/2/transactions/${transactionId}/refund?${queryParams}`;\n        return this.http.put(path);\n    }\n}\n\ntype RefundQueryParams = {\n    amount?: number;\n    reason?: string;\n    cancelsubscriptions?: boolean;\n} & {\n    [key: string]: number; // Dynamic key for vendor, formatted as: vendor.${vendorId}.amount\n}\n"]}