{"version":3,"file":"MarketplaceGateway.js","sourceRoot":"","sources":["../../src/lib/marketplace/MarketplaceGateway.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2CAA2C;AAK3C,MAAa,kBAAkB;IAG3B,YAAmB,IAAgB;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAEY,MAAM,CAAC,MAAqB;;YACrC,MAAM,IAAI,GAAG,qBAAqB,CAAC;YACnC,MAAM,IAAI,GAAG,MAAM,CAAC;YACpB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAElD,IAAI;gBACA,OAAO,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,mBAAmB;aAC1F;YAAC,WAAM;gBACJ,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC9D;QACL,CAAC;KAAA;IAEY,MAAM,CAAC,QAAgB,EAAE,OAAsB;;YACxD,MAAM,IAAI,GAAG,uBAAuB,QAAQ,EAAE,CAAC;YAC/C,MAAM,IAAI,GAAG,OAAO,CAAC;YACrB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACrC,CAAC;KAAA;IAEY,GAAG,CAAC,QAAgB;;YAC7B,MAAM,IAAI,GAAG,uBAAuB,QAAQ,EAAE,CAAC;YAC/C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;KAAA;IAEY,MAAM,CAAC,UAAyC;;YACzD,MAAM,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,uBAAuB,WAAW,EAAE,CAAC;YAClD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;KAAA;CACJ;AAnCD,gDAmCC","sourcesContent":["import * as querystring from 'querystring';\nimport { HttpClient } from '../http/HttpClient';\nimport { VendorRequest, VendorResponse } from './models/Vendor';\nimport { VendorsResponse } from './models/Vendors';\n\nexport class MarketplaceGateway {\n    private http: HttpClient;\n\n    public constructor(http: HttpClient) {\n        this.http = http;\n    }\n\n    public async create(vendor: VendorRequest): Promise<number> {\n        const path = '/services/2/vendors';\n        const body = vendor;\n        const response = await this.http.post(path, body);\n\n        try {\n            return parseInt(response.headers.get('location').split('/').pop()); // Get the vendorId\n        } catch {\n            throw new Error('Could not parse vendorId from response.');\n        }\n    }\n\n    public async update(vendorId: number, updates: VendorRequest): Promise<null> {\n        const path = `/services/2/vendors/${vendorId}`;\n        const body = updates;\n        return this.http.put(path, body);\n    }\n\n    public async get(vendorId: number): Promise<VendorResponse> {\n        const path = `/services/2/vendors/${vendorId}`;\n        return this.http.get(path);\n    }\n\n    public async getAll(parameters?: MarketplaceGetAllQueryParams): Promise<VendorsResponse> {\n        const queryParams = querystring.stringify(parameters);\n        const path = `/services/2/vendors?${queryParams}`;\n        return this.http.get(path);\n    }\n}\n\ninterface MarketplaceGetAllQueryParams {\n    after?: number;\n    before?: number;\n    gettotal?: boolean;\n    pagesize?: number;\n}\n"]}