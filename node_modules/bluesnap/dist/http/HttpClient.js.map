{"version":3,"file":"HttpClient.js","sourceRoot":"","sources":["../../src/lib/http/HttpClient.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2CAA+B;AAG/B,MAAa,UAAU;IAGnB,YAAmB,MAAsB;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAEY,GAAG,CAAC,IAAY;;YACzB,MAAM,QAAQ,GAAG,MAAM,oBAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,IAAI,EAAE,EAAE;gBAC/D,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;aAC7B,CAAC,CAAC;YAEH,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC;KAAA;IAEY,IAAI,CAAC,IAAY,EAAE,IAAiC;;YAC7D,MAAM,QAAQ,GAAG,MAAM,oBAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,IAAI,EAAE,EAAE;gBAC/D,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;gBAC1B,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aAC7B,CAAC,CAAC;YAEH,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;gBACzB,OAAO,QAAQ,CAAC;aACnB;YAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC;KAAA;IAEY,GAAG,CAAC,IAAY,EAAE,IAAiC;;YAC5D,MAAM,QAAQ,GAAG,MAAM,oBAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,IAAI,EAAE,EAAE;gBAC/D,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;gBAC1B,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aAC7B,CAAC,CAAC;YAEH,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;gBACzB,OAAO,IAAI,CAAC;aACf;YAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC;KAAA;IAEO,UAAU;QACd,MAAM,OAAO,GAAwB;YACjC,aAAa,EAAE,IAAI,CAAC,sBAAsB,EAAE;YAC5C,MAAM,EAAE,kBAAkB;YAC1B,cAAc,EAAE,kBAAkB;SACrC,CAAC;QAEF,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;YACxB,OAAO,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;SACxD;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAEO,sBAAsB;QAC1B,OAAO,SAAS,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;IACxG,CAAC;CACJ;AA7DD,gCA6DC","sourcesContent":["import fetch from 'node-fetch';\nimport { BlueSnapConfig } from '../bluesnap/BlueSnapConfig';\n\nexport class HttpClient {\n    private config: BlueSnapConfig;\n\n    public constructor(config: BlueSnapConfig) {\n        this.config = config;\n    }\n\n    public async get(path: string): Promise<any> {\n        const response = await fetch(`${this.config.getBaseUrl()}${path}`, {\n            method: 'GET',\n            headers: this.getHeaders(),\n        });\n\n        return await response.json();\n    }\n\n    public async post(path: string, body?: Record<string, any> | null): Promise<any> {\n        const response = await fetch(`${this.config.getBaseUrl()}${path}`, {\n            method: 'POST',\n            headers: this.getHeaders(),\n            body: JSON.stringify(body),\n        });\n\n        if (response.status === 201) {\n            return response;\n        }\n\n        return await response.json();\n    }\n\n    public async put(path: string, body?: Record<string, any> | null): Promise<any> {\n        const response = await fetch(`${this.config.getBaseUrl()}${path}`, {\n            method: 'PUT',\n            headers: this.getHeaders(),\n            body: JSON.stringify(body),\n        });\n\n        if (response.status === 204) {\n            return null;\n        }\n\n        return await response.json();\n    }\n\n    private getHeaders(): Record<string, any> {\n        const headers: Record<string, any> = {\n            Authorization: this.getAuthorizationHeader(),\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        };\n\n        if (this.config.apiVersion) {\n            headers['bluesnap-version'] = this.config.apiVersion;\n        }\n\n        return headers;\n    }\n\n    private getAuthorizationHeader(): string {\n        return `Basic ${Buffer.from(`${this.config.username}:${this.config.password}`).toString('base64')}`;\n    }\n}\n"]}