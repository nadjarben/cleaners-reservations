{"version":3,"file":"AltTransaction.js","sourceRoot":"","sources":["../../../../src/lib/transaction/alt/models/AltTransaction.ts"],"names":[],"mappings":"","sourcesContent":["import { TransactionMetaDataRequest, TransactionMetaDataResponse } from '../../models/TransactionMetaData';\nimport { PayerInfoRequest, PayerInfoResponse } from '../../../vaultedShopper/models/PayerInfo';\nimport { FraudResultInfoResponse } from '../../models/FraudResultInfo';\nimport { ProcessingInfoResponse } from '../../models/ProcessingInfo';\nimport { ValidatedResponse } from '../../../errors/models/ValidatedResponse';\nimport { RefundsResponse } from '../../../refund/models/Refunds';\nimport { TransactionFraudInfoRequest } from '../../models/TransactionFraudInfo';\n\n/**\n * Contains the information required to process a transaction with an alternative payment method\n */\n\nexport interface AltTransactionRequest {\n    amount: number;\n    payerInfo?: PayerInfoRequest;\n    vaultedShopperId?: number;\n    merchantTransactionId?: string;\n    softDescriptor?: string;\n    transactionDescription?: string;\n    currency: string;\n    transactionMetaData?: TransactionMetaDataRequest;\n    transactionFraudInfo?: TransactionFraudInfoRequest;\n}\n\nexport interface AltTransactionResponse extends ValidatedResponse {\n    amount: number;\n    payerInfo: PayerInfoResponse;\n    vaultedShopperId: number;\n    merchantTransactionId: string;\n    processingInfo: ProcessingInfoResponse;\n    softDescriptor: string;\n    currency: string;\n    transactionMetaData: TransactionMetaDataResponse;\n    fraudResultInfo: FraudResultInfoResponse;\n    subscriptionId: number;\n    transactionId: string;\n    refunds: RefundsResponse;\n}\n"]}